@using Umbraco.Cms.Web.Common.PublishedModels;
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage
@{
	Layout = "mainLayout.cshtml";
	ViewBag.Title = Model.Value("pageTitle") ?? null;

	var selection = Umbraco.Content(Guid.Parse("65b7a274-f827-4dd1-ad48-f2bc92605393"))?
	.ChildrenOfType("serviceItemTemplate")?
	.Where(x => x.IsVisible());

	var itemsPerPage = 6;

	@*kollar efter ett attribut i vår url. Hämtar ut aktuella pageNr, sparar in det i variabel*@
	@*Om parsing inge funkar, sättts till 1*@
	if(!int.TryParse(Context.Request.Query["page"], out int currentPage))
		currentPage = 1;

	@*Räknar antalet hätmade objekt*@
	var totalItems = selection?.Count() ?? 0;
	@*Tar bara de aktuella objekten vi vill sortera ut (6)*@
	var pagedItems = selection?.Skip((currentPage - 1) * itemsPerPage).Take(itemsPerPage);

}



<section id="our-services" class="our-services">
	<div class="container">
		<div class="content">
			
			@if(!string.IsNullOrEmpty(Model.Value("customHeadline")?.ToString())) {
				<div class="headline">
					<h2>@Model.Value("customHeadline")</h2>
				</div>
			}

			<div class="content-grid services">
				@if(pagedItems != null) {
					@foreach(var item in pagedItems!) {

						var image = item.Value<IPublishedContent>("thumbnailImage")?.Url() ?? "";
						var preamble = item.Value<string>("preamble") ?? "";

						<a href="@item.Url()">
							<div class="item-container">
								<h4>@item.Name</h4>
								<img src="@image" alt="@item.Name()" class="services-item-image" />
								<p class="item-text">@preamble</p>
							</div>
						</a>
					}
				}
			</div>
		</div>

                                                           @*PAGINATION*@
		<section class="pagination">
			<div class="container">
				
				@if (currentPage > 1)
				{
					<a href="?page=@(currentPage - 1)" class="change">PREV</a>
				}
				else 
				{
					<span class="change inactive">PREV</span>
				}
@*Loopar igenom alla sidor vi har*@
				<ul class="pages">
				@for(int i = 1; i <= Math.Ceiling((decimal)totalItems / itemsPerPage); i++)
				{
					<li class="@((i == currentPage) ? "number active" : "number")">
						<a href="?page=@i">@i</a>
					</li>
				}
				</ul>
@*kontrollerar hur många sidor som finns*@
				@if(currentPage < Math.Ceiling((decimal)totalItems / itemsPerPage))
				{
					<a class="change" href="?page=@(currentPage + 1)">NEXT</a>
				}
				else
				{
					<span class="change inactive">NEXT</span>
				}
			</div>
		</section>


	</div>
</section>

@await Html.PartialAsync("partials/static/contact-component.cshtml");



